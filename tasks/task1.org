#+TITLE: Assignment 1. Intro to modern programming tools and techniques. Fall '16 - Spring '17
#+OPTIONS: toc:nil

* Description
The goal of **assignment 1** is to write a program solving a zero-sum game in the matrix form.
As part of the assignment you:
- Will write code that finds a solution to a game by reducing it to a pair of dual linear programming problems [fn:or].
- Show how you solution works by visualizing spectres of optimal strategies.
- /(optional)/ Write automatic tests for you program.

The main objective of **assignment 1** is to get you familiar with *Python* programming language, *SciPy* library, *Jupyter* interactive development environment, and optionally with unit testing library *Nose*.

When it comes to *grading*:
1. /(50 poins)/ Write a function ~nash_equilibrium(a)~ that takes as an input a payoff matrix and returns game's value and optimal strategies of both players.
2. /(50 points)/ Demonstrate how you program works by visualizing the spectres of optimal strategies for several sample games in Jupyter.
   In particular, your sample games should exibit at least:
   1. An optimal strategy that is pure (i.e. its spectre has only 1 point).
   2. An optimal strategy that has a partial spectre (i.e. some pure strategies are not used).
   3. An optimal strategy with a full spectre (i.e. all pure strategies are used).
3. /(10 points)/ Package your solution [fn:packaging].
4. /(20 points)/ Write unit tests for ~nash_equilibrium~ [fn:testing].

Items 3 and 4 are optional and will give extra points to those who needs them.

As an example, consider a zero-sum game with the following payoff matrix:

#+BEGIN_EXAMPLE
|  4 | 0 | 6 |  2 |  2 | 1 |
|  3 | 8 | 4 | 10 |  4 | 4 |
|  1 | 2 | 6 |  5 |  0 | 0 |
|  6 | 6 | 4 |  4 | 10 | 3 |
| 10 | 4 | 6 |  4 |  0 | 9 |
| 10 | 7 | 0 |  7 |  9 | 8 |
#+END_EXAMPLE

Its value is ~151/31~ and players' optimal strategies are:
#+BEGIN_EXAMPLE
| p || 0 | 4/31 | 3/31    | 27/62 | 21/62  |    0 |
| q || 0 |    0 | 257/372 | 9/62  | 55/372 | 1/62 |
#+END_EXAMPLE

Visualization of optimal strategies should look like this:

[[./task1/first-player-support.png]]

[[./task1/second-player-support.png]]

* Submissions
The assignment *must* be done by a group of 2.
The process is described in ~README.org~, section [[file:~/dev/cmc-courses/prac-2017-2018/README.org::#submission-rules][Submission rules]].

* Dates
- Submit before 11 Nov 2016.
- Pass review before 15 Nov 2016.
